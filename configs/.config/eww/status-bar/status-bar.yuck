(defwindow status-bar
  :monitor 0
  :geometry (geometry
    :x "0px"
    :y "0px"
    :width "40px"
    :height "100%"
    :anchor "left center")
  :stacking "fg"
  :exclusive true
  :focusable "none"
(status-bar))


(defwidget status-bar[]
  (centerbox
    :orientation "v"

    (top)
    (center)
    (bottom)
  )
)


(defwidget top[]
  (box
    :class "top" :valign "start"
    :spacing 8 :orientation "v" :space-evenly false

    (dashboard-button)
    (workspaces)
  )
)


;; TIMER ;;

;;
;;i want 1 widget which count time i work, when i click on widget, it start count time
;;When i click on widget again, it will stop, THE TIME is REMAIN
;;when i poweroff, it save the time to data.
(defvar is_timer_active false)
(defvar timer_hour "00")
(defvar timer_min "00")

(defwidget timer[]
  
  (box
    :class "timer"
    :space-evenly false

    (button
      :class {is_timer_active ? "active" : "inactive"} :hexpand true
      :onclick `
        ${is_timer_active ?
          "${EWW_CMD} update is_timer_active=false && ./scripts/update_timer_value.sh -s" :
          "${EWW_CMD} update is_timer_active=true && ./scripts/update_timer_value.sh -r"
        }
      `

      "${timer_hour}\\n${timer_min}"
    )
  )
)


;; WORKSPACES ;;
;; This widget displays workspace buttons with dynamic styling based on their active state.
;;
;; - The script `eww/scripts/update-workspaces.sh` updates the variable `workspaces-array`.
;; - `workspaces-array` is a JSON-style array of 0s and 1s:
;;     - 1 = Active workspace
;;     - 0 = Inactive workspace
;;
;; Each button corresponds to a workspace and is styled with either the "active" or "inactive"
;; CSS class depending on its state.

(defvar workspace-array "[1,0,0,0,0,0]")

(defwidget workspaces[]
  (box
    :class "workspaces"
    :spacing 4 :orientation "v"

    (button :class {workspace-array[0] == 0 ? "inactive" : "active"} "w")
    (button :class {workspace-array[1] == 0 ? "inactive" : "active"} "i")
    (button :class {workspace-array[2] == 0 ? "inactive" : "active"} "s")
    (button :class {workspace-array[3] == 0 ? "inactive" : "active"} "d")
    (button :class {workspace-array[4] == 0 ? "inactive" : "active"} "o")
    (button :class {workspace-array[5] == 0 ? "inactive" : "active"} "m")
  )
)


;; DASHBOARD;;
;; This widget controls the visibility of the dashboard window.

(defvar is-dashboard-enabled false)

(defwidget dashboard-button[]
  (box
    :class "dashboard-button"

    (button
      :class {is-dashboard-enabled ? "active" : "inactive"}
      :onclick
        {
          is-dashboard-enabled ?
          "${EWW_CMD} update is-dashboard-enabled=false && ${EWW_CMD} close dashboard"
          :
          "${EWW_CMD} update is-dashboard-enabled=true && ${EWW_CMD} open dashboard"
        }
      "󰣇")
  )
)


(defwidget center[]
  (box
    (clock)
  )
)


(defvar is-calendar-enabled false)

(defwidget clock[]
  (box
    :class "clock" :valign "center"
    :orientation "v" :space-evenly false

    (button
      :class { is-calendar-enabled ? "active" : "inactive"}
      :onclick 
        {
          is-calendar-enabled ?
          "${EWW_CMD} update is-calendar-enabled=false && ${EWW_CMD} close Calendar"
          :
          "${EWW_CMD} update is-calendar-enabled=true && ${EWW_CMD} open Calendar"
        }
      {formattime(EWW_TIME, "%H\\n%M")})
  )
)


(defwindow Calendar
  :monitor 0
  :geometry (geometry
    :x "32px"
    :y "0px"
    :width "0"
    :height "0"
    :anchor "left center")
  :stacking "fg"
  :exclusive false
  :focusable "none"
(calendar-widget))



;; GTK styling is problematic, as mentioned in https://github.com/elkowar/eww/issues/652.
;; I will revisit this later.
(defwidget calendar-widget[]
  (box
    :class "calendar-box"
    :orientation "v" :space-evenly false
    (calendar
      :class "calendar"
      :day 2 :month 7 )
    (button
      "Lunar")
  )

)


(defwidget bottom[]
  (box
    :class "bottom" :valign "end"
    :orientation "v" :space-evenly false

    (brightness)
    (volume)
  )
)


;; BRIGHTNESS ;;
;; This widget displays a vertical brightness control with an interactive slider.

(defvar brightness-value "100")
(defvar is-brightness-expand false)

(defwidget brightness[]
  (eventbox
    :class "brightness"
    :onhover "${EWW_CMD} update is-brightness-expand=true"
    :onhoverlost "${EWW_CMD} update is-brightness-expand=false"

    (box
      :orientation "v" :space-evenly false

      (revealer
        :transition "slideup" :reveal is-brightness-expand

        (box
          (scale
            :class "scale"
            :flipped true :value brightness-value :min 0 :max 101 
            :orientation "v"
            :onchange "brightnessctl s {}% && ./scripts/update-brightness-value.sh")

          (label
            :class "label"
            :show-truncated false :wrap true :wrap-mode "char"
            :text brightness-value)
        )
      )

      (button
        :class "button"
        "󰌵")
    )
  )
)


;; VOLUME ;;
;; This widget displays a vertical volume control with an interactive slider.

(defvar volume-value "100")
(defvar is-volume-expand false)

(defwidget volume[]
  (eventbox
    :class "volume"
    :onhover "${EWW_CMD} update is-volume-expand=true"
    :onhoverlost "${EWW_CMD} update is-volume-expand=false"

    (box
      :orientation "v" :space-evenly false

      (revealer
        :transition "slideup" :reveal is-volume-expand

        (box
          (scale
            :class "scale"
            :flipped true :value volume-value :min 0 :max 101 :orientation "v"
            :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}% && ./scripts/update-volume-value.sh" )

          (label
            :class "label"
            :show-truncated false :wrap true :wrap-mode "char"
            :text volume-value)
        )
      )

      (button
        :class "button"
        "")
    )
  )
)
